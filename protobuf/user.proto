syntax = "proto3";
package service.user;
option go_package = "github.com/mzmico/user-service/protobuf";


import "mzmico/protobuf/session.proto";
import "google/protobuf/duration.proto";

enum LoginType {
    LOGIN_TYPE_SMS = 0;
    LOGIN_TYPE_WECHAT_JSCODE = 1;
    LOGIN_TYPE_WECHAT_APP_OPENID = 2;
    LOGIN_TYPE_WECHAT_APP_UNIONID = 4;
}

enum AccountType {
    ACCOUNT_TYPE_WECHAT_APP_OPENID = 0;
    ACCOUNT_TYPE_WECHAT_APP_UNIONID = 1;
}

enum LoginStatus {
    LOGIN_STATUS_OK = 0;
    LOGIN_STATUS_PASSOWRD_ERROR = 1;
    LOGIN_STATUS_NOT_EXISTS = 2;
}

message LoginRequest {
    mzmico.protobuf.Session session = 1;
    string app_id = 2;
    string account = 3;
    string certificate = 4;
    LoginType type = 5;
}

message LoginResponse {
    string uid = 1;
    string token = 2;
    string account = 3;
    string certificate = 4;
    LoginStatus status = 5;
    AccountType type = 6;
}


enum VerificationCodeType {
    VERIFICATION_CODE_TYPE_SMS = 0;
}

enum VerificationCodeState {
    VERIFICATION_CODE_STATE_FAIL = 0;
    VERIFICATION_CODE_STATE_CREATE = 1;
    VERIFICATION_CODE_STATE_EXISTS = 2;
}


message VerificationCodeRequest {
    string app_id = 1;
    mzmico.protobuf.Session session = 2;
    string account = 3;
    google.protobuf.Duration timeout = 4;
    bool create = 5;
    VerificationCodeType type = 6;
}

message VerificationCodeResponse {
    string code = 1;
    VerificationCodeState state =2;

}

message CreateUserRequest {
    string app_id = 1;
    mzmico.protobuf.Session session = 2;
    string name = 4;
    string nick = 5;
    string avatar = 6;
    map<string,string> extend = 8;
}

message CreateUserResponse {
    string uid = 1;
}

message BindAccountRequest {
    string app_id = 1;
    mzmico.protobuf.Session session = 2;
    string uid = 3;
    string account = 4;
    string certificate = 5;
    AccountType type = 6;
    bool replace = 7;
}

enum BindAccountState {
    BIND_ACCOUNT_OK = 0;
    BIND_ACCOUNT_ALREADY_EXIST = 1;
}


message BindAccountResponse {
    BindAccountState state = 1;
}

service User {
    rpc Login(LoginRequest) returns (LoginResponse) {};
    rpc VerificationCode(VerificationCodeRequest) returns (VerificationCodeResponse) {};

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {};
    rpc BindAccount(BindAccountRequest) returns (BindAccountResponse) {};

}
