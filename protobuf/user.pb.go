// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	LoginRequest
	LoginResponse
	VerificationCodeRequest
	VerificationCodeResponse
	CreateUserRequest
	CreateUserResponse
	BindAccountRequest
	BindAccountResponse
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mzmico_protobuf "github.com/mzmico/protobuf"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginType int32

const (
	LoginType_LOGIN_TYPE_SMS           LoginType = 0
	LoginType_LOGIN_TYPE_WECHAT_JSCODE LoginType = 1
)

var LoginType_name = map[int32]string{
	0: "LOGIN_TYPE_SMS",
	1: "LOGIN_TYPE_WECHAT_JSCODE",
}
var LoginType_value = map[string]int32{
	"LOGIN_TYPE_SMS":           0,
	"LOGIN_TYPE_WECHAT_JSCODE": 1,
}

func (x LoginType) String() string {
	return proto.EnumName(LoginType_name, int32(x))
}
func (LoginType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_WECHAT_APP_OPENID  AccountType = 0
	AccountType_ACCOUNT_TYPE_WECHAT_APP_UNIONID AccountType = 1
)

var AccountType_name = map[int32]string{
	0: "ACCOUNT_TYPE_WECHAT_APP_OPENID",
	1: "ACCOUNT_TYPE_WECHAT_APP_UNIONID",
}
var AccountType_value = map[string]int32{
	"ACCOUNT_TYPE_WECHAT_APP_OPENID":  0,
	"ACCOUNT_TYPE_WECHAT_APP_UNIONID": 1,
}

func (x AccountType) String() string {
	return proto.EnumName(AccountType_name, int32(x))
}
func (AccountType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LoginStatus int32

const (
	LoginStatus_LOGIN_STATUS_OK             LoginStatus = 0
	LoginStatus_LOGIN_STATUS_PASSOWRD_ERROR LoginStatus = 1
	LoginStatus_LOGIN_STATUS_NOT_EXISTS     LoginStatus = 2
)

var LoginStatus_name = map[int32]string{
	0: "LOGIN_STATUS_OK",
	1: "LOGIN_STATUS_PASSOWRD_ERROR",
	2: "LOGIN_STATUS_NOT_EXISTS",
}
var LoginStatus_value = map[string]int32{
	"LOGIN_STATUS_OK":             0,
	"LOGIN_STATUS_PASSOWRD_ERROR": 1,
	"LOGIN_STATUS_NOT_EXISTS":     2,
}

func (x LoginStatus) String() string {
	return proto.EnumName(LoginStatus_name, int32(x))
}
func (LoginStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type VerificationCodeType int32

const (
	VerificationCodeType_VERIFICATION_CODE_TYPE_SMS VerificationCodeType = 0
)

var VerificationCodeType_name = map[int32]string{
	0: "VERIFICATION_CODE_TYPE_SMS",
}
var VerificationCodeType_value = map[string]int32{
	"VERIFICATION_CODE_TYPE_SMS": 0,
}

func (x VerificationCodeType) String() string {
	return proto.EnumName(VerificationCodeType_name, int32(x))
}
func (VerificationCodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type VerificationCodeState int32

const (
	VerificationCodeState_VERIFICATION_CODE_STATE_FAIL   VerificationCodeState = 0
	VerificationCodeState_VERIFICATION_CODE_STATE_CREATE VerificationCodeState = 1
	VerificationCodeState_VERIFICATION_CODE_STATE_EXISTS VerificationCodeState = 2
)

var VerificationCodeState_name = map[int32]string{
	0: "VERIFICATION_CODE_STATE_FAIL",
	1: "VERIFICATION_CODE_STATE_CREATE",
	2: "VERIFICATION_CODE_STATE_EXISTS",
}
var VerificationCodeState_value = map[string]int32{
	"VERIFICATION_CODE_STATE_FAIL":   0,
	"VERIFICATION_CODE_STATE_CREATE": 1,
	"VERIFICATION_CODE_STATE_EXISTS": 2,
}

func (x VerificationCodeState) String() string {
	return proto.EnumName(VerificationCodeState_name, int32(x))
}
func (VerificationCodeState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type BindAccountState int32

const (
	BindAccountState_BIND_ACCOUNT_OK BindAccountState = 0
)

var BindAccountState_name = map[int32]string{
	0: "BIND_ACCOUNT_OK",
}
var BindAccountState_value = map[string]int32{
	"BIND_ACCOUNT_OK": 0,
}

func (x BindAccountState) String() string {
	return proto.EnumName(BindAccountState_name, int32(x))
}
func (BindAccountState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type LoginRequest struct {
	Session     *mzmico_protobuf.Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	AppId       string                   `protobuf:"bytes,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Account     string                   `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	Certificate string                   `protobuf:"bytes,4,opt,name=certificate" json:"certificate,omitempty"`
	Type        LoginType                `protobuf:"varint,5,opt,name=type,enum=service.user.LoginType" json:"type,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginRequest) GetSession() *mzmico_protobuf.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *LoginRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *LoginRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginRequest) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *LoginRequest) GetType() LoginType {
	if m != nil {
		return m.Type
	}
	return LoginType_LOGIN_TYPE_SMS
}

type LoginResponse struct {
	Uid         string      `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Token       string      `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
	Account     string      `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	Certificate string      `protobuf:"bytes,4,opt,name=certificate" json:"certificate,omitempty"`
	Status      LoginStatus `protobuf:"varint,5,opt,name=status,enum=service.user.LoginStatus" json:"status,omitempty"`
	Type        AccountType `protobuf:"varint,6,opt,name=type,enum=service.user.AccountType" json:"type,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginResponse) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginResponse) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *LoginResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *LoginResponse) GetStatus() LoginStatus {
	if m != nil {
		return m.Status
	}
	return LoginStatus_LOGIN_STATUS_OK
}

func (m *LoginResponse) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_ACCOUNT_TYPE_WECHAT_APP_OPENID
}

type VerificationCodeRequest struct {
	AppId   string                    `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Session *mzmico_protobuf.Session  `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	Account string                    `protobuf:"bytes,3,opt,name=account" json:"account,omitempty"`
	Timeout *google_protobuf.Duration `protobuf:"bytes,4,opt,name=timeout" json:"timeout,omitempty"`
	Create  bool                      `protobuf:"varint,5,opt,name=create" json:"create,omitempty"`
	Type    VerificationCodeType      `protobuf:"varint,6,opt,name=type,enum=service.user.VerificationCodeType" json:"type,omitempty"`
}

func (m *VerificationCodeRequest) Reset()                    { *m = VerificationCodeRequest{} }
func (m *VerificationCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*VerificationCodeRequest) ProtoMessage()               {}
func (*VerificationCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VerificationCodeRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *VerificationCodeRequest) GetSession() *mzmico_protobuf.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *VerificationCodeRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *VerificationCodeRequest) GetTimeout() *google_protobuf.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *VerificationCodeRequest) GetCreate() bool {
	if m != nil {
		return m.Create
	}
	return false
}

func (m *VerificationCodeRequest) GetType() VerificationCodeType {
	if m != nil {
		return m.Type
	}
	return VerificationCodeType_VERIFICATION_CODE_TYPE_SMS
}

type VerificationCodeResponse struct {
	Code  string                `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	State VerificationCodeState `protobuf:"varint,2,opt,name=state,enum=service.user.VerificationCodeState" json:"state,omitempty"`
}

func (m *VerificationCodeResponse) Reset()                    { *m = VerificationCodeResponse{} }
func (m *VerificationCodeResponse) String() string            { return proto.CompactTextString(m) }
func (*VerificationCodeResponse) ProtoMessage()               {}
func (*VerificationCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VerificationCodeResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *VerificationCodeResponse) GetState() VerificationCodeState {
	if m != nil {
		return m.State
	}
	return VerificationCodeState_VERIFICATION_CODE_STATE_FAIL
}

type CreateUserRequest struct {
	AppId   string                   `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Session *mzmico_protobuf.Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	Name    string                   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Nick    string                   `protobuf:"bytes,5,opt,name=nick" json:"nick,omitempty"`
	Avatar  string                   `protobuf:"bytes,6,opt,name=avatar" json:"avatar,omitempty"`
	Extend  map[string]string        `protobuf:"bytes,8,rep,name=extend" json:"extend,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateUserRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CreateUserRequest) GetSession() *mzmico_protobuf.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *CreateUserRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateUserRequest) GetNick() string {
	if m != nil {
		return m.Nick
	}
	return ""
}

func (m *CreateUserRequest) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *CreateUserRequest) GetExtend() map[string]string {
	if m != nil {
		return m.Extend
	}
	return nil
}

type CreateUserResponse struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateUserResponse) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type BindAccountRequest struct {
	AppId       string                   `protobuf:"bytes,1,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	Session     *mzmico_protobuf.Session `protobuf:"bytes,2,opt,name=session" json:"session,omitempty"`
	Uid         string                   `protobuf:"bytes,3,opt,name=uid" json:"uid,omitempty"`
	Account     string                   `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	Certificate string                   `protobuf:"bytes,5,opt,name=certificate" json:"certificate,omitempty"`
	Type        AccountType              `protobuf:"varint,6,opt,name=type,enum=service.user.AccountType" json:"type,omitempty"`
}

func (m *BindAccountRequest) Reset()                    { *m = BindAccountRequest{} }
func (m *BindAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*BindAccountRequest) ProtoMessage()               {}
func (*BindAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BindAccountRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *BindAccountRequest) GetSession() *mzmico_protobuf.Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *BindAccountRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *BindAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *BindAccountRequest) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *BindAccountRequest) GetType() AccountType {
	if m != nil {
		return m.Type
	}
	return AccountType_ACCOUNT_TYPE_WECHAT_APP_OPENID
}

type BindAccountResponse struct {
	State BindAccountState `protobuf:"varint,1,opt,name=state,enum=service.user.BindAccountState" json:"state,omitempty"`
}

func (m *BindAccountResponse) Reset()                    { *m = BindAccountResponse{} }
func (m *BindAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*BindAccountResponse) ProtoMessage()               {}
func (*BindAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BindAccountResponse) GetState() BindAccountState {
	if m != nil {
		return m.State
	}
	return BindAccountState_BIND_ACCOUNT_OK
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "service.user.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "service.user.LoginResponse")
	proto.RegisterType((*VerificationCodeRequest)(nil), "service.user.VerificationCodeRequest")
	proto.RegisterType((*VerificationCodeResponse)(nil), "service.user.VerificationCodeResponse")
	proto.RegisterType((*CreateUserRequest)(nil), "service.user.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "service.user.CreateUserResponse")
	proto.RegisterType((*BindAccountRequest)(nil), "service.user.BindAccountRequest")
	proto.RegisterType((*BindAccountResponse)(nil), "service.user.BindAccountResponse")
	proto.RegisterEnum("service.user.LoginType", LoginType_name, LoginType_value)
	proto.RegisterEnum("service.user.AccountType", AccountType_name, AccountType_value)
	proto.RegisterEnum("service.user.LoginStatus", LoginStatus_name, LoginStatus_value)
	proto.RegisterEnum("service.user.VerificationCodeType", VerificationCodeType_name, VerificationCodeType_value)
	proto.RegisterEnum("service.user.VerificationCodeState", VerificationCodeState_name, VerificationCodeState_value)
	proto.RegisterEnum("service.user.BindAccountState", BindAccountState_name, BindAccountState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	VerificationCode(ctx context.Context, in *VerificationCodeRequest, opts ...grpc.CallOption) (*VerificationCodeResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	BindAccount(ctx context.Context, in *BindAccountRequest, opts ...grpc.CallOption) (*BindAccountResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/service.user.User/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerificationCode(ctx context.Context, in *VerificationCodeRequest, opts ...grpc.CallOption) (*VerificationCodeResponse, error) {
	out := new(VerificationCodeResponse)
	err := grpc.Invoke(ctx, "/service.user.User/VerificationCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/service.user.User/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindAccount(ctx context.Context, in *BindAccountRequest, opts ...grpc.CallOption) (*BindAccountResponse, error) {
	out := new(BindAccountResponse)
	err := grpc.Invoke(ctx, "/service.user.User/BindAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	VerificationCode(context.Context, *VerificationCodeRequest) (*VerificationCodeResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	BindAccount(context.Context, *BindAccountRequest) (*BindAccountResponse, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.user.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.user.User/VerificationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerificationCode(ctx, req.(*VerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.user.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.user.User/BindAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindAccount(ctx, req.(*BindAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "VerificationCode",
			Handler:    _User_VerificationCode_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "BindAccount",
			Handler:    _User_BindAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xdd, 0x72, 0xdb, 0x44,
	0x14, 0xb6, 0x1c, 0xdb, 0x69, 0x8e, 0x4b, 0x10, 0xa7, 0x2d, 0x51, 0x9d, 0x92, 0x18, 0x77, 0x68,
	0x83, 0x3b, 0x55, 0x06, 0x97, 0xe9, 0x50, 0x66, 0xb8, 0x70, 0x64, 0x15, 0x44, 0x83, 0x65, 0x56,
	0x4a, 0x0a, 0xdc, 0x08, 0x45, 0xde, 0x06, 0x8d, 0x6b, 0xc9, 0xe8, 0x27, 0x83, 0xb9, 0x63, 0x78,
	0x0f, 0x1e, 0x86, 0x77, 0x60, 0x86, 0x0b, 0x1e, 0x86, 0xd9, 0xd5, 0xca, 0x96, 0x13, 0xdb, 0x85,
	0xe9, 0xe4, 0x6e, 0xf7, 0xec, 0xb7, 0xe7, 0xe7, 0x3b, 0xe7, 0x5b, 0x09, 0x20, 0x8d, 0x69, 0xa4,
	0x4e, 0xa2, 0x30, 0x09, 0xf1, 0x66, 0x4c, 0xa3, 0x0b, 0xdf, 0xa3, 0x2a, 0xb3, 0x35, 0x3e, 0x18,
	0xff, 0x3a, 0xf6, 0xbd, 0xf0, 0x90, 0x9f, 0x9d, 0xa5, 0xaf, 0x0e, 0x63, 0x1a, 0xc7, 0x7e, 0x18,
	0x64, 0xe0, 0xc6, 0xde, 0x79, 0x18, 0x9e, 0xbf, 0xa6, 0xf3, 0xe3, 0x61, 0x1a, 0xb9, 0xc9, 0xec,
	0xbc, 0xf5, 0xa7, 0x04, 0x37, 0x8f, 0xc3, 0x73, 0x3f, 0x20, 0xf4, 0xe7, 0x94, 0xc6, 0x09, 0x76,
	0x60, 0x53, 0x78, 0x50, 0xa4, 0xa6, 0x74, 0x50, 0xef, 0x28, 0x6a, 0x16, 0x41, 0xcd, 0x5d, 0xa8,
	0x56, 0x76, 0x4e, 0x72, 0x20, 0xde, 0x81, 0x9a, 0x3b, 0x99, 0x38, 0xfe, 0x50, 0x29, 0x37, 0xa5,
	0x83, 0x2d, 0x52, 0x75, 0x27, 0x13, 0x63, 0x88, 0x0a, 0x6c, 0xba, 0x9e, 0x17, 0xa6, 0x41, 0xa2,
	0x6c, 0x70, 0x7b, 0xbe, 0xc5, 0x26, 0xd4, 0x3d, 0x1a, 0x25, 0xfe, 0x2b, 0xdf, 0x73, 0x13, 0xaa,
	0x54, 0xf8, 0x69, 0xd1, 0x84, 0x8f, 0xa0, 0x92, 0x4c, 0x27, 0x54, 0xa9, 0x36, 0xa5, 0x83, 0xed,
	0xce, 0x8e, 0x5a, 0xac, 0x59, 0xe5, 0x09, 0xdb, 0xd3, 0x09, 0x25, 0x1c, 0xd4, 0xfa, 0x4b, 0x82,
	0x77, 0x44, 0x11, 0xf1, 0x24, 0x0c, 0x62, 0x8a, 0x32, 0x6c, 0xa4, 0xfe, 0x90, 0x57, 0xb0, 0x45,
	0xd8, 0x12, 0x6f, 0x43, 0x35, 0x09, 0x47, 0x34, 0xc8, 0x53, 0xe4, 0x9b, 0xb7, 0x4a, 0xf1, 0x13,
	0xa8, 0xc5, 0x89, 0x9b, 0xa4, 0xb1, 0x48, 0xf2, 0xee, 0x92, 0x24, 0x2d, 0x0e, 0x20, 0x02, 0x88,
	0x8f, 0x45, 0x55, 0xb5, 0x65, 0x17, 0xba, 0x59, 0xe4, 0x42, 0x5d, 0xbf, 0x97, 0x61, 0xe7, 0x94,
	0x46, 0x59, 0x40, 0x3f, 0x0c, 0xb4, 0x70, 0x48, 0xf3, 0x3e, 0xcd, 0x39, 0x97, 0x8a, 0x9c, 0x17,
	0xda, 0x57, 0xfe, 0xaf, 0xed, 0x5b, 0x4d, 0xc2, 0x13, 0xd8, 0x4c, 0xfc, 0x31, 0x0d, 0xd3, 0x84,
	0x13, 0x50, 0xef, 0xdc, 0x55, 0xb3, 0x79, 0x9a, 0x7b, 0xeb, 0x89, 0x79, 0x22, 0x39, 0x12, 0xdf,
	0x87, 0x9a, 0x17, 0x51, 0x46, 0x1a, 0xe3, 0xe5, 0x06, 0x11, 0x3b, 0x7c, 0xba, 0x50, 0x7c, 0x6b,
	0xb1, 0xf8, 0xcb, 0x65, 0x16, 0x58, 0xf0, 0x41, 0xb9, 0x4a, 0x82, 0xe8, 0x33, 0x42, 0xc5, 0x0b,
	0x87, 0x54, 0x70, 0xc0, 0xd7, 0xf8, 0x0c, 0xaa, 0x8c, 0x6e, 0xca, 0x09, 0xd8, 0xee, 0xdc, 0x5f,
	0x1f, 0x88, 0x75, 0x88, 0x92, 0xec, 0x46, 0xeb, 0x8f, 0x32, 0xbc, 0xa7, 0xf1, 0x6c, 0x4f, 0x62,
	0x1a, 0x5d, 0x03, 0xd5, 0x08, 0x95, 0xc0, 0x1d, 0xe7, 0xe3, 0xc4, 0xd7, 0xdc, 0xe6, 0x7b, 0x23,
	0xce, 0x16, 0xb3, 0xf9, 0xde, 0x88, 0x71, 0xe8, 0x5e, 0xb8, 0x89, 0x1b, 0x71, 0xb6, 0xb6, 0x88,
	0xd8, 0xa1, 0x06, 0x35, 0xfa, 0x4b, 0x42, 0x83, 0xa1, 0x72, 0xa3, 0xb9, 0x71, 0x50, 0xef, 0x3c,
	0x5a, 0x2c, 0xee, 0x4a, 0xee, 0xaa, 0xce, 0xd1, 0x7a, 0x90, 0x44, 0x53, 0x22, 0xae, 0x36, 0x9e,
	0x41, 0xbd, 0x60, 0x66, 0x5a, 0x19, 0xd1, 0x69, 0xae, 0x95, 0x11, 0x9d, 0x32, 0xad, 0x5c, 0xb8,
	0xaf, 0x53, 0x9a, 0x6b, 0x85, 0x6f, 0x3e, 0x2f, 0x7f, 0x26, 0xb5, 0x1e, 0x00, 0x16, 0x63, 0xac,
	0x52, 0x5b, 0xeb, 0x1f, 0x09, 0xf0, 0xc8, 0x0f, 0x86, 0x62, 0xa6, 0xaf, 0x81, 0x49, 0x11, 0x73,
	0x63, 0xae, 0xf0, 0xc2, 0x18, 0x57, 0xd6, 0x6a, 0xb9, 0x7a, 0x55, 0xcb, 0xff, 0x53, 0x98, 0x2f,
	0xe0, 0xd6, 0x42, 0x75, 0x82, 0x87, 0x4f, 0xf3, 0xc9, 0x93, 0xb8, 0x9b, 0xbd, 0x45, 0x37, 0x85,
	0x1b, 0xc5, 0xa1, 0x6b, 0x7f, 0x01, 0x5b, 0xb3, 0x07, 0x0d, 0x11, 0xb6, 0x8f, 0xcd, 0x2f, 0x8d,
	0xbe, 0x63, 0x7f, 0x3f, 0xd0, 0x1d, 0xeb, 0x1b, 0x4b, 0x2e, 0xe1, 0x3d, 0x50, 0x0a, 0xb6, 0x97,
	0xba, 0xf6, 0x55, 0xd7, 0x76, 0xbe, 0xb6, 0x34, 0xb3, 0xa7, 0xcb, 0x52, 0xfb, 0x14, 0xea, 0x85,
	0x04, 0xb1, 0x05, 0x7b, 0x5d, 0x4d, 0x33, 0x4f, 0xfa, 0xf6, 0x02, 0xbc, 0x3b, 0x18, 0x38, 0xe6,
	0x40, 0xef, 0x1b, 0x3d, 0xb9, 0x84, 0xf7, 0x61, 0x7f, 0x15, 0xe6, 0xa4, 0x6f, 0x98, 0x0c, 0x24,
	0xb5, 0x7f, 0x84, 0x7a, 0xe1, 0x09, 0xc3, 0x5b, 0xf0, 0x6e, 0x96, 0x84, 0x65, 0x77, 0xed, 0x13,
	0xcb, 0x31, 0x5f, 0xc8, 0x25, 0xdc, 0x87, 0xdd, 0x05, 0xe3, 0xa0, 0x6b, 0x59, 0xe6, 0x4b, 0xd2,
	0x73, 0x74, 0x42, 0x4c, 0x22, 0x4b, 0xb8, 0x0b, 0x3b, 0x0b, 0x80, 0xbe, 0x69, 0x3b, 0xfa, 0x77,
	0x86, 0x65, 0x5b, 0x72, 0xb9, 0xfd, 0x14, 0x6e, 0x2f, 0x93, 0x3d, 0xee, 0x41, 0xe3, 0x54, 0x27,
	0xc6, 0x73, 0x43, 0xeb, 0xda, 0x86, 0xd9, 0x77, 0x58, 0xa1, 0x05, 0x3e, 0xda, 0xbf, 0x49, 0x70,
	0x67, 0xa9, 0x8c, 0xb1, 0x09, 0xf7, 0xae, 0xde, 0x64, 0xa1, 0x75, 0xe7, 0x79, 0xd7, 0x38, 0x96,
	0x4b, 0x8c, 0x9e, 0x55, 0x08, 0x8d, 0xe8, 0x5d, 0x5b, 0x97, 0xa5, 0x75, 0x98, 0x59, 0xee, 0x0f,
	0x41, 0xbe, 0xdc, 0x4f, 0x46, 0xd1, 0x91, 0xd1, 0xef, 0x39, 0x39, 0xb7, 0x8c, 0xa2, 0xce, 0xdf,
	0x65, 0xa8, 0x30, 0xb1, 0xe0, 0x11, 0x54, 0x39, 0x9f, 0xd8, 0x58, 0xf2, 0x9d, 0x10, 0x02, 0x69,
	0xec, 0x2e, 0x3d, 0xcb, 0xc6, 0xab, 0x55, 0x42, 0x0f, 0xe4, 0xcb, 0x85, 0xe3, 0x47, 0xeb, 0xdf,
	0xb7, 0xdc, 0xf3, 0x83, 0x37, 0xc1, 0x66, 0x41, 0xbe, 0x05, 0x98, 0x6b, 0x1c, 0xf7, 0xdf, 0xf0,
	0xc2, 0x34, 0x9a, 0xab, 0x01, 0x33, 0x97, 0x36, 0xd4, 0x0b, 0x6c, 0x61, 0x73, 0xa5, 0x30, 0x72,
	0xa7, 0x1f, 0xae, 0x41, 0xe4, 0x5e, 0x8f, 0x3e, 0xfe, 0xe1, 0xe1, 0xb9, 0x9f, 0xfc, 0x94, 0x9e,
	0xa9, 0x5e, 0x38, 0x3e, 0x14, 0xff, 0x41, 0x0c, 0xff, 0x58, 0x5c, 0x9e, 0xfd, 0xf5, 0x9c, 0xd5,
	0xf8, 0xea, 0xc9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x86, 0x2f, 0x2f, 0x48, 0x09, 0x00,
	0x00,
}
